let skillBlock=document.querySelector("#skillsBlock");function changeSkillState(skillId){const skill=document.querySelector(`#${skillId}`);let state;if(skill){let skillClass;for(let i=0;i<skill.classList.length;i++){if(skill.classList[i].includes("skill")){skillClass=skill.classList[i];break}}if(skillClass!=="disabled-skill"){skill.remove();skill.classList.remove(skillClass);skill.classList.add("disabled-skill");console.log(skill);skill.childNodes[1].childNodes[0].src="../static/icons/button-off.png";if(localStorage.getItem("hideDisabledSkills")==="false"){skillBlock.append(skill)}state=0}else{skill.classList.remove("disabled-skill");if(skill.id.includes("SoftSkill")||skill.id.includes("Soft")||skill.id.includes("Knowledge")||skill.id.includes("BehaviorSkills")){skill.classList.add("soft-skill")}else{skill.classList.add("hard-skill")}console.log(skill);try{skill.remove();skill.childNodes[1].childNodes[0].src="../static/icons/button-on.png";document.querySelectorAll(".disabled-skill")[0].before(skill)}catch{skill.childNodes[1].childNodes[0].src="../static/icons/button-on.png";skillBlock.append(skill)}state=1}postData(`${baseUrl}/changeSkillState`,{skill:skill.textContent})}return state}function addSkill(skill,i){let skillDiv=document.createElement("div");if(skill.enabled==false){skillDiv.className="badge bg-primary text-wrap disabled-skill"}else if(skill.id.includes("SoftSkill")||skill.id.includes("Knowledge")||skill.id.includes("BehaviorSkills")){skillDiv.className="badge bg-primary text-wrap soft-skill"}else{skillDiv.className="badge bg-primary text-wrap hard-skill"}skillDiv.textContent=skill.name;skillDiv.id=`${skill.id}-${i}`;let iconButton;iconButton=document.createElement("img");if(skill.enabled){iconButton.src="../static/icons/button-on.png"}else{iconButton.src="../static/icons/button-off.png"}iconButton.style.height="1rem";let delButton=document.createElement("button");delButton.className="btn";delButton.id=i;delButton.addEventListener("mouseover",e=>{e.currentTarget.setAttribute("style","background-color: red")});delButton.addEventListener("mouseout",e=>{e.currentTarget.setAttribute("style","")});delButton.addEventListener("click",e=>{e.currentTarget.setAttribute("style","");let state=changeSkillState(`${skill.id}-${i}`);if(state==0){skill.enabled=false;disabledSkills.push(skill);disableSkill(skill.name)}else{skill.enabled=true;disabledSkills.pop(skill);enableSkill(skill)}});delButton.appendChild(iconButton);skillDiv.appendChild(delButton);skillBlock.appendChild(skillDiv)}function loadSkills(topSkills=""){let enabled=skillList.filter(skill=>skill.enabled),disabled=skillList.filter(skill=>skill.enabled===false);if(topSkills&&localStorage.getItem("isCVUploadedFirstly")=="true"){topSkills.forEach(skill=>{if(skill){const elemE=enabled.find(skillObj=>skillObj.name==skill[0]);const elemD=disabled.find(skillObj=>skillObj.name==skill[0]);if(!elemE&&elemD){disabled.pop(elemD);elemD.enabled=true;enabled.push(elemD);enableSkill(elemD);postData(`${baseUrl}/changeSkillState`,{skill:skill[0]})}}});localStorage.setItem("isCVUploadedFirstly","false")}enabled.sort();disabled.sort();let i=0;enabled.forEach(skill=>{addSkill(skill,i);i++});if(localStorage.getItem("hideDisabledSkills")=="false"){showDisabledSkills()}}function calcSkillsWeightAndShowIt(){const urlRequest=`${baseUrl}/getRchilliSkills`;postData(urlRequest).then(response=>{return response.json()}).then(data=>{if(data!=404){let skillsSize=data.length;let skillsWeights={};let skillsIn={};let skillsLastUsed={};let skillsExp={};data.map(skill=>{const skillName=skill.FormattedName;if(skillName!=""){if(skillName in skillsIn){skillsIn[skillName]+=1}else{skillsIn[skillName]=1}}});data.map(skill=>{const skillName=skill.FormattedName;if(skillName!=""){if(skillName in skillsWeights){skillsWeights[skillName]+=1/skillsSize}else{skillsWeights[skillName]=1/skillsSize}const n=+skill.ExperienceInMonths;if(n){if(skillName in skillsExp){skillsExp[skillName]=Math.max(skillsExp[skillName],n)}else{skillsExp[skillName]=n}}if(skill.LastUsed!=""){const nowDate=new Date;const m=skill.LastUsed.slice(3,5),d=skill.LastUsed.slice(0,2),y=skill.LastUsed.slice(-4);const endDate=new Date(`${m}.${d}.${y}`);const diff=nowDate-endDate;const hours=Math.floor(diff/36e5);const mDiff=Math.trunc(hours/730);if(skillName in skillsLastUsed){skillsLastUsed[skillName]=Math.min(skillsLastUsed[skillName],mDiff)}else{skillsLastUsed[skillName]=mDiff}}}});for(let key in skillsLastUsed){if(skillsLastUsed[key]<=12){skillsWeights[key]+=.25}}for(let key in skillsExp){switch(true){case skillsExp[key]<=6:skillsWeights[key]+=.1;break;case skillsExp[key]<=12:skillsWeights[key]+=.25;break;case skillsExp[key]>12:skillsWeights[key]+=.5;break}}let topSkills=Object.keys(skillsWeights).map(function(key){return[key,skillsWeights[key]]});topSkills.sort(function(first,second){return second[1]-first[1]});loadSkills(topSkills.slice(0,Math.min(10,topSkills.length)))}})}